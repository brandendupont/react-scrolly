{"version":3,"sources":["/Users/garfieldduck/Documents/Projects/SelfProject/react-scrolly/docs/src/index.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_garfieldduck_Documents_Projects_SelfProject_react_scrolly_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","alt","src","isMDXComponent"],"mappings":"wWAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gBADR,gBAGAL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,6BADR,6BAGAL,OAAAE,EAAA,EAAAF,CAAA,6DAAwDA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,iBAAxD,KACAN,OAAAE,EAAA,EAAAF,CAAA,kQAGAA,OAAAE,EAAA,EAAAF,CAAA,8RAGAA,OAAAE,EAAA,EAAAF,CAAA,+BAA0BA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,iBAA1B,gHACAN,OAAAE,EAAA,EAAAF,CAAA,SAAGA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,iBAAH,4CACAN,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,yEACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,wIACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,8DACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,kGAAuHN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,iBAAvH,qCAAuNN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CAC1OC,KAAQ,iDAD2M,gBAAvN,qGAKFP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,oCADR,oCAGAL,OAAAE,EAAA,EAAAF,CAAA,gBAAWA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,kBAAX,+DAAqIN,OAAAE,EAAA,EAAAF,CAAA,UAAQM,WAAW,KAAnB,4BAArI,gBACAN,OAAAE,EAAA,EAAAF,CAAA,SAAGA,OAAAE,EAAA,EAAAF,CAAA,OAAKQ,IAAI,iBAAiBC,IAAI,yGACjCT,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,wBADR,yBAGAL,OAAAE,EAAA,EAAAF,CAAA,8HAAyHA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,2BAAzH,2EAC0DN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,KAAQ,CAC5EC,KAAQ,2DAD8C,WAD1D,MAIFP,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,iBAJE,qJAKsCN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,wBALtC,KAK4GN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,QAL5G,uCAMAN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,iCADR,iCAGAL,OAAAE,EAAA,EAAAF,CAAA,gFACAA,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,kCAAuDN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CAC1EC,KAAQ,uCAD2C,uCAGvDP,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,2DAAgFN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACnGC,KAAQ,4DADoE,sOAOtFX,EAAWc,gBAAiB","file":"static/js/docs-src-index.5a7086bd.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h1>\n    <h2 {...{\n      \"id\": \"scrolly-telling-made-easy\"\n    }}>{`Scrolly-telling made easy`}</h2>\n    <p>{`Magical scroll-based interactions made easy with `}<inlineCode parentName=\"p\">{`react-scrolly`}</inlineCode>{`.`}</p>\n    <p>{`Scroll-based interactions create an incredible experience by letting users explore the story with simple scrolls,\nsuch highlighting a portion of the content,\nor animating the route on a map based on the position of the section user is reading.`}</p>\n    <p>{`However, tracking the scrolling progress by yourself is burdensome,\nand binding the window scroll tracking for each component is prone to cause performance issues as the number of tracked components increase,\nand thus making users see the screen juddering when scrolling.`}</p>\n    <p>{`With this in mind, `}<inlineCode parentName=\"p\">{`react-scrolly`}</inlineCode>{` is created to allow you to track the progress of scrolling with minimum efforts and the performance impact.`}</p>\n    <p><inlineCode parentName=\"p\">{`react-scrolly`}</inlineCode>{` is perfect for the following use cases:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Track the scrolled ratio (ratio of a section being read) by the user.`}</li>\n      <li parentName=\"ul\">{`Track the section the user is currently reading (closest to the bottom of the viewport) and its scrolled ratio in another component.`}</li>\n      <li parentName=\"ul\">{`Pin components on the scroll based on the scroll position.`}</li>\n      <li parentName=\"ul\">{`Making scrolled-based animations or parallax effects (by combining the scrolled ratio provided `}<inlineCode parentName=\"li\">{`react-scrolly`}</inlineCode>{` with animation libraries such as `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/react-spring/react-spring\"\n        }}>{`react-spring`}</a>{`,\nyou are able to make stunning scroll-based visual effects with concise and declarative code).`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"definition-of-the-scrolled-ratio\"\n    }}>{`Definition of the scrolled ratio`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`scrolled ratio`}</inlineCode>{` is defined by the ratio of a component being scrolled over `}<strong parentName=\"p\">{`the bottom of the screen`}</strong>{` (viewport).`}</p>\n    <p><img alt=\"Scrolled ratio\" src=\"https://user-images.githubusercontent.com/1139698/57021937-3a29f800-6c60-11e9-89d8-51959a7ca60e.png\" /></p>\n    <h2 {...{\n      \"id\": \"why-is-it-performant\"\n    }}>{`Why is it performant?`}</h2>\n    <p>{`In contrast to the traditional scroll tracking by binding window scroll event listeners to components and calling `}<inlineCode parentName=\"p\">{`getBoundingClientRect()`}</inlineCode>{` on scroll\nwhich potentially causes many unnecessary re-renderings and `}<a parentName=\"p\" {...{\n        \"href\": \"https://gist.github.com/paulirish/5d52fb081b3570c81e3a\"\n      }}>{`reflows`}</a>{`,\n`}<inlineCode parentName=\"p\">{`react-scrolly`}</inlineCode>{` only notifies the scrolling position changes to the components currently intersected with the viewport,\nwhich is made possible by utilizing the `}<inlineCode parentName=\"p\">{`IntersectionObserver`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`RxJS`}</inlineCode>{`, the context API, and React hooks.`}</p>\n    <h2 {...{\n      \"id\": \"how-to-design-scrolly-telling\"\n    }}>{`How to design scrolly-telling`}</h2>\n    <p>{`Here are some references to help you design better scrolly-telling:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`How To Scroll by Mike Bostock: `}<a parentName=\"li\" {...{\n          \"href\": \"https://bost.ocks.org/mike/scroll/\"\n        }}>{`https://bost.ocks.org/mike/scroll/`}</a></li>\n      <li parentName=\"ul\">{`Responsive scrollytelling best practices (The Pudding): `}<a parentName=\"li\" {...{\n          \"href\": \"https://pudding.cool/process/responsive-scrollytelling/\"\n        }}>{`https://pudding.cool/process/responsive-scrollytelling/`}</a></li>\n    </ul>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}